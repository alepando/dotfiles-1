#+Title: Emacs Customizations
#+Author: Sean Allred
#+Date: [2014-10-24 Fri]

#+PROPERTY: tangle ".emacs.d/init.org.el"
#+PROPERTY: noweb yes
#+PROPERTY: mkdirp t
#+OPTIONS: tasks:nil toc:1

* Introduction
This file holds the relevant portion of my =.emacs.d=.  This includes
many different types of customizations, including
- my standardized, cross-platform initialization file and
- download and installation procedures for custom packages (those not
  on any ELPA).
Of course this list isn't comprehensive; this directory will hold
/everything/ that has to do with Emacs aside from the actual
distribution.  This /file/ will include everything it reasonably can.

All variables and functions that I introduce are prefixed with ~*-~ if
they are intended to be customized and ~*--~ if they are not so
intended.

** Creating the Directory
This directory is maintained both as an [[http://orgmode.org][Org]] file and its tangled
output.  Everything in the directory will be obtainable through this
file, whether it be from embedded shell scripts or standard, tangled
output.  With a recent Emacs installed, use =M-x org-babel-tangle= to
tangle the file.  This will create a Makefile and all of the necessary
Lisp files needed to fully reproduce this installation.

** Byte Compilation
#+begin_src elisp :tangle no
(add-hook 'org-babel-post-tangle-hook
          (lambda () (interactive)
            (mapc 'byte-compile-file
                  '("init.el"))))
#+end_src

* Package Management
=use-package.el=.  Fantastic, fantastic tool.  We need to initialize
the standard =package.el= to use it though, since it was installed
using it.  (See this [[http://emacs.stackexchange.com/q/2647/2264][emacs.se question]].)
#+begin_src elisp
(require 'package)
(package-initialize)
(require 'use-package)
#+end_src
** Windowed-Specific Settings
#+begin_src elisp
(when window-system
 (tool-bar-mode -1)
 (scroll-bar-mode -1))
#+end_src
* TeX
TeX is a typesetting system that produces documents of high quality
and typographical consistency.  I'm a heavy user of this system under
[[http://www.gnu.org/s/auctex][AUCTeX]] and [[http://www.gnu.org/s/auctex/reftex.html][RefTeX]], two of the most indispensible resources available
for TeX under emacs.
#+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :config (prog1 t
            <<TeX-support-functions>>)
  :bind (("C-c t" . *-TeX-find-texdoc)
         ("C-c f" . *-TeX-find-kpathsea)))
#+end_src
** Jumping to Source Code
:PROPERTIES:
:noweb-ref: TeX-support-functions
:tangle: no
:END:
#+begin_src emacs-lisp
(defun *-TeX-find-kpathsea (string)
  (interactive "sFind file in TeX distribution: ")
  (find-file (substring (shell-command-to-string
                         (format "kpsewhich %s" string))
                        0 -1)))
#+end_src
** Finding Documentation with TeXdoc
:PROPERTIES:
:noweb-ref: TeX-support-functions
:END:
=texdoc= is an application that comes with most TeX distributions.
This function brings them up within emacs.
#+begin_src elisp :tangle no
(defun *-TeX-find-texdoc (texdoc-query)
  (interactive "sPackage: ")
  (if (string-equal texdoc-query "")
      (error "Cannot query texdoc against an empty string")
    (let ((texdoc-output (shell-command-to-string
                          (format "texdoc -l -M %s"
                                  texdoc-query))))
      (if (string-match texdoc-output "")
          (error "Sorry, no documentation found for %s" texdoc-query)
        (let ((texdoc-file (nth 2 (split-string texdoc-output))))
          (if (file-readable-p texdoc-file)
              (let ((new-file (*-create-temporary-file
                               "pdf"
                               (format *-TeX-find-texdoc-temp-file-format
                                       texdoc-query
                                       texdoc-file))))
                (copy-file texdoc-file new-file t)
                (find-file-other-window new-file))
            (error "Sorry, the file returned by texdoc for %s isn't readable"
                   texdoc-query)))))))
#+end_src

To support this function, the following is provided to control the
format of the file name that is generated.
#+begin_src elisp 
(defcustom *-TeX-find-texdoc-temp-file-format
  "TeX-find-texdoc--%s--"
  "The prefix for temporary files created with `*-TeX-find-texdoc'"
  :group '*-tex)
#+end_src

- [ ] Research =TeX-doc= \\
  This function claims to do this, but I can't manage it...

* Other
#+begin_src emacs-lisp :tangle no
;TODO: See if this works in latex-mode
(use-package tex
  :ensure auctex
  :config (prog1 t
            <<TeX-support-functions>>)
  :bind (("C-c t" . *-TeX-find-texdoc)
         ("C-c f" . *-TeX-find-kpathsea)))

(use-package cc-mode
  :bind (("C-c RET" . ff-find-related-file)
         ("C-c C-'" . compile)))

(use-package company
  :ensure t
  :commands company-mode
  :defer t)

(use-package monokai-theme
  :if window-system
  :config (enable-theme 'monokai))
(use-package bbdb
  :if window-system)
(use-package github-clone
  :if window-system)
(use-package helm
  :ensure t
  :if window-system
  :commands (helm helm-M-x))
(use-package helm-ag
  :if window-system)
(use-package htmlize
  :if window-system)
(use-package magit
  :defer t 
  :if window-system)
(use-package nose
  :defer t
  :if window-system)

(use-package org
  :defer t
  :if window-system)

(use-package slime
  :defer t
  :if window-system)

(use-package twittering-mode
  :commands (twit twittering-mode)
  :if window-system)

(use-package multiple-cursors
  :bind (("C-<"   . mc/mark-previous-like-this)
         ("C->"   . mc/mark-next-like-this)
         ("C-M->" . mc/mark-all-like-this-dwim)))

(use-package yasnippet
  :defer t)

(use-package yaml-mode)
(use-package smex
  :config (progn (smex-initialize) (message "Smex loaded"))
  :bind (("M-x" . smex)
         ("s-x" . smex-major-mode-commands)))

(use-package markdown-mode)
(use-package god-mode
  :bind ("<escape>" . god-local-mode))
(use-package evil
  :commands evil-mode)

(use-package fish-mode
  :mode "\\.fish\\'")
(use-package ido
  :config (progn
            (use-package flx-ido)
            (ido-mode t)
            (setq ido-everywhere t)))

(use-package bf-mode
  :defer t)

(use-package coffee-mode
  :defer t)

(use-package csv-mode
  :defer t)
#+end_src
* COMMENT NO TANGLE
  :PROPERTIES:
  :tangle:   no
  :END:
** COMMENT A Multi-Platform Configuration
:PROPERTIES:
:ID:       7CD67A70-10FB-4A27-B0EF-269F1A1AAB80
:END:
One of the things I like about Emacs is its consistent availability on
a variety of platforms---far more even than I've ever heard of.  I
mainly use
- Max OS X,
- Windows 7+, and
- Red Hat.
Do effect this, I use the variable ~system-type~.  These variables are
simply introduced to make code more readable.
#+begin_src elisp
(defconst *--windows-p
  (equal system-type 'windows-nt)
  "Predicate indicating if this is a Windows environment.")
(defconst *--osx-p
  (equal system-type 'darwin)
  "Predicate indicating if this is a OS X environment.")
(defconst *--redhat-p
  (equal system-type 'gnu/linux)
  "Predicate indicating if this is a Redhat environment.")
#+end_src

If there ever is an occasion to toggle configuration based on the
current window system (or lack thereof), there is ~window-system~.

*** Dropbox
:PROPERTIES:
:ID:       6BBD6555-3BC9-47CE-8D72-876DFA4912B1
:END:
#+begin_src emacs-lisp
(defconst *-dropbox-directory
  (expand-file-name
   "Dropbox folder"
   (cond
    (*--windows-p "T:")
    (*--osx-p "~")))
  "Dropbox directory")
#+end_src

*** Themes
I don't want black backgrounds when I'm in a terminal.  That's just obnoxious.
#+begin_src elisp

#+end_src

** COMMENT Extending Emacs Lisp
:PROPERTIES:
:tangle: no
:ID:       3965422A-36EB-4169-B1F4-D2C460AD4F46
:END:
*** Automatic Minor-Mode Selection
#+begin_src elisp
;; Prepare a list of conses - see docstring
;; http://stackoverflow.com/a/13946304/1443496
(defvar auto-minor-mode-alist ()
  "Alist of filename patterns vs correpsonding minor mode functions,
      see `auto-mode-alist'. All elements of this alist are checked,
      meaning you can enable multiple minor modes for the same regexp.")

;; Create a hook
(defun enable-minor-mode-based-on-extension ()
  "check file name against auto-minor-mode-alist to enable minor modes
       the checking happens for all pairs in auto-minor-mode-alist"
  (when buffer-file-name
    (let ((name buffer-file-name)
	  (remote-id (file-remote-p buffer-file-name))
	  (alist auto-minor-mode-alist))
      ;; Remove backup-suffixes from file name.
      (setq name (file-name-sans-versions name))
      ;; Remove remote file name identification.
      (when (and (stringp remote-id)
		 (string-match-p (regexp-quote remote-id) name))
	(setq name (substring name (match-end 0))))
      (while (and alist (caar alist) (cdar alist))
	(if (string-match (caar alist) name)
	    (funcall (cdar alist) 1))
	(setq alist (cdr alist))))))
#+end_src
This must be hooked onto ~find-file~ to work.

** COMMENT File Management
*** Creating Temporary Files
:PROPERTIES:
:ID:       5D2605A7-0E33-479E-A7CD-4EB0F60B091A
:END:
#+begin_src elisp
(defun *-create-temporary-file (ext &optional prefix)
  "Creates a temporary file with EXT as the extension."
  (interactive "sExtension: ")
   (make-temp-file
    (concat "temp-file--" prefix) nil
    (concat "." ext)))

(defun *-find-temporary-file (ext &optional prefix)
  (interactive "sExtension: ")
  (find-file (*-create-temporary-file ext prefix)))
#+end_src
** COMMENT Ido
*** Smex
:PROPERTIES:
:ID:       26A3ADE7-4054-49DD-B2F4-F52DC014B833
:END:
#+begin_src elisp
(defun *-smex-smart-smex ()
  (interactive)
  (or (boundp 'smex-cache)
      (smex-initialize))
  (global-set-key (kbd "M-x") 'smex)
  (smex))

(defun *-smex-smart-smex-major-mode-commands ()
  (interactive)
  (or (boundp 'smex-cache)
      (smex-initialize))
  (global-set-key (kbd "M-S-x") 'smex-major-mode-commands)
  (smex-major-mode-commands))
#+end_src
*** Flx
** COMMENT Keybindings
:PROPERTIES:
:ID:       4785E12F-3823-42E0-9EC2-1614E52E3513
:END:
#+begin_src elisp
(defun *-with-map-bind-keys-to-functions (map ft-k-f)
  (when ft-k-f
    (let ((feature (caar ft-k-f))
          (keys   (cadar ft-k-f))
          (func  (caddar ft-k-f)))
      (eval-after-load (if (not (booleanp feature)) feature 'emacs)
        `(define-key map ,(kbd keys) (function ,func)))
      (*-with-map-bind-keys-to-functions map (rest ft-k-f)))))
#+end_src
#+begin_src elisp
(defun *-after-feature-set-keys-to-functions (feature k-f)
  (when k-f
    (eval-after-load (if (not (booleanp feature)) feature 'emacs)
      (prog1 t
        (global-set-key (kbd (caar k-f)) (eval (cadar k-f)))))
    (*-after-feature-set-keys-to-functions feature (rest k-f))))
#+end_src

** COMMENT [[https://github.com/capitaomorte/yasnippet][Snippets]]
=yasnippet= is a great way to manage mode-specific code snippets.
Since =yasnippet= has its own snippet creation workflow from within
emacs, they are not created here.

** COMMENT [[https://github.com/chrisdone/god-mode][God Mode]]
:PROPERTIES:
:ID:       1EB69989-1D35-4FE6-946F-73E209F855D5
:END:
Modal-editing the emacs way.  When in this minor mode, modifier keys
are more-or-less stripped away.  See [[https://github.com/chrisdone/god-mode][upstream]] for details.

*** Updating the Cursor
   :PROPERTIES:
   :ID:       6BE32D66-B37C-4228-AC45-FACBDA3561E6
   :END:
These are the recommended settings.
#+begin_src elisp
(defcustom *-god-mode-update-cursor-affected-forms
  '(god-local-mode buffer-read-only)
  "If any of these forms evaluate to non-nil, the cursor will change."
  :group '*-god)

(defcustom *-god-mode-update-cursor-cursor
  'hbar
  "The cursor to use"
  :group '*-god)

(defun *--god-mode-update-cursor ()
  (setq cursor-type
        (if (member t (mapcar #'eval *-god-mode-update-cursor-affected-forms))
            ,*-god-mode-update-cursor-cursor t)))

(mapc
 (lambda (hook)
   (add-hook hook #'*--god-mode-update-cursor))
 '(god-mode-enabled-hook god-mode-disabled-hook))
#+end_src

** TeX
:PROPERTIES:

:END:
TeX is a typesetting system that produces documents of high quality
and typographical consistency.  I'm a heavy user of this system under
[[http://www.gnu.org/s/auctex][AUCTeX]] and [[http://www.gnu.org/s/auctex/reftex.html][RefTeX]], two of the most indispensible resources available
for TeX under emacs.
*** Jumping to Source Code
:PROPERTIES:
:ID:       4F444822-5172-4CFE-B17F-249713AE5A4E
:END:
#+begin_src emacs-lisp
(defun *-TeX-find-kpathsea (string)
  (interactive "sFind file in TeX distribution: ")
  (find-file (substring (shell-command-to-string
                         (format "kpsewhich %s" string))
                        0 -1)))
#+end_src
*** Finding Documentation with TeXdoc
:PROPERTIES:
:ID:       C812C891-2428-4EFA-8E0C-8FD67710B7BC
:END:
=texdoc= is an application that comes with most TeX distributions.
This function brings them up within emacs.
#+begin_src elisp
(defcustom *-TeX-find-texdoc-temp-file-format
  "TeX-find-texdoc--%s--"
  "The prefix for temporary files created with `*-TeX-find-texdoc'"
  :group '*-tex)
#+end_src

#+begin_src elisp 
(defun *-TeX-find-texdoc (texdoc-query)
  (interactive "sPackage: ")
  (if (string-equal texdoc-query "")
      (error "Cannot query texdoc against an empty string")
    (let ((texdoc-output (shell-command-to-string
                          (format "texdoc -l -M %s"
                                  texdoc-query))))
      (if (string-match texdoc-output "")
          (error "Sorry, no documentation found for %s" texdoc-query)
        (let ((texdoc-file (nth 2 (split-string texdoc-output))))
          (if (file-readable-p texdoc-file)
              (let ((new-file (*-create-temporary-file
                               "pdf"
                               (format *-TeX-find-texdoc-temp-file-format
                                       texdoc-query
                                       texdoc-file))))
                (copy-file texdoc-file new-file t)
                (find-file-other-window new-file))
            (error "Sorry, the file returned by texdoc for %s isn't readable"
                   texdoc-query)))))))
#+end_src

**** TODO Research =TeX-doc=
This function claims to do this, but I can't manage it...

** COMMENT Dired
*** Mapping Over Marked Files
:PROPERTIES:
:ID:       05B8B02F-50F9-4C97-802B-28C0A84A207D
:END:
#+begin_src elisp
(defun *-dired-for-each-marked-file (function)
  "Do stuff for each marked file, only works in dired window"
  (interactive)
  (if (eq major-mode 'dired-mode)
      (mapcar function (dired-get-marked-files))
    (error "Not a Dired buffer `%s'" major-mode)))
#+end_src
*** TODO Zipping Files
:PROPERTIES:
:tangle: no
:END:
There is work to be done on this.
#+begin_src elisp
(eval-after-load "dired-aux"
   '(add-to-list 'dired-compress-file-suffixes
                 '("\\.zip\\'" ".zip" "unzip")))

(eval-after-load "dired"
  '(define-key dired-mode-map "z" 'dired-zip-files))
(defun dired-zip-files (zip-file)
  "Create an archive containing the marked files."
  (interactive "sEnter name of zip file: ")

  ;; create the zip file
  (let ((zip-file (if (string-match ".zip$" zip-file) zip-file (concat zip-file ".zip"))))
    (shell-command
     (concat "zip "
             zip-file
             " "
             (concat-string-list
              (mapcar
               '(lambda (filename)
                  (file-name-nondirectory filename))
               (dired-get-marked-files))))))

  (revert-buffer)

  ;; remove the mark on all the files  "*" to " "
  ;(dired-change-marks 42 ?\040)
  ;; mark zip file
  (dired-mark-files-regexp zip-file);;(filename-to-regexp zip-file))
  )

(defun concat-string-list (list)
   "Return a string which is a concatenation of all elements of the list separated by spaces"
    (mapconcat '(lambda (obj) (format "%s" obj)) list " "))
#+end_src

** COMMENT Twitter
Use ~twit~ (I believe) to set your account info.  This is also the
entry point into the mode.

** COMMENT C Modes
** COMMENT ~$PATH~ Setup
:PROPERTIES:
:ID:       9B3EA54C-866B-4AA0-8DFA-693F5AD2A318
:END:
I don't know why I can't =M-x customize= this, but this form allows me
to use programs that aren't in the standard path (=/usr/bin=,
=/usr/sbin=, =/bin=, and =/sbin=).  In particular, TeX distributions
on *NIX system use =/usr/texbin= and Homebrew shoves stuff into
=/usr/local/bin=.
#+begin_src elisp
(setenv "PATH"
        (mapconcat #'identity
                   `("/usr/texbin"
                     "/usr/local/bin"
                     ,(getenv "PATH"))
                   path-separator))
#+end_src
** COMMENT [[http://www.orgmode.org][Org]]
*** COMMENT Exporting
:PROPERTIES:
:ID:       ABC7D6F7-3E87-47CF-9827-600769A53F4D
:tangle:   no
:END:
#+begin_src emacs-lisp
(defcustom *-org-preprocess-final-replace-alist
  '((" --\n" . " -- \n"))
  "Alist of replacements to make before export"
  :group '*-org)

(defun *-org-preprocess-final-make-replacements ()
  (mapc (lambda (pair)
          (replace-string (car pair)
                          (cdr pair)))
        *-org-preprocess-final-replace-alist))
#+end_src

*** Printing Subtrees
:PROPERTIES:
:ID:       0555DF57-0E20-4168-9554-E71F65018863
:END:
#+begin_src elisp
(defun org-ps-print-subtree (&optional prefix)
  "Prints the current subtree.
If the prefix is non-nil, it will be printed without faces."
  (interactive)
  (save-excursion
    (org-mark-subtree)
    (funcall (if prefix
                 #'ps-print-region
               #'ps-print-region-with-faces)
             (point) (mark) "out.ps")
    (shell-command "open out.ps")))
#+end_src

*** COMMENT Mobile
:PROPERTIES:
:tangle:   no
:END:
#+begin_src emacs-lisp
(setq org-mobile-directory
      (concat user-emacs-directory "../Apps/MobileOrg"))
(setq org-mobile-inbox-for-pull
      (concat user-emacs-directory "../org/from-mobile.org"))
#+end_src
*** COMMENT Blogging
:PROPERTIES:
:tangle: no
:END:
#+begin_src emacs-lisp
(require 'org2blog)

(setq org2blog/wp-blog-alist
      '(("wordpress"
         :url "http://itsalltext.wordpress.com/xmlrpc.php"
         :username "vermiculus"

         :default-title "Hello World"
         :default-categories ("customization")
         :tags-as-categories nil)
        ("It's All Text"
         :url "http://itsalltext.wordpress.com/xmlrpc.php"
         :username "vermiculus")))

(setq org-publish-project-alist
   '(("blog" .  (:base-directory "~/github/octopress/source/org_posts/"
                 :base-extension "org"
                 :publishing-directory "~/github/octopress/source/_posts/"
                 :sub-superscript ""
                 :recursive t
                 :publishing-function org-html-publish-to-html
                 :headline-levels 4
                 :html-extension "markdown"
                 :body-only t))))
#+end_src

*** TODO Customize the following [0/2]
- [ ] ~org-directory~
- [ ] ~org-default-notes-file~

** COMMENT General
*** Text Editing
*** Buffer Information
**** Removing Temporary Files
:PROPERTIES:
:ID:       19D3A424-889C-4A53-A9B2-FE825C7405BD
:END:
#+begin_src emacs-lisp
(defun *-delete-this-buffer-and-file ()
  "Removes file connected to current buffer and kills buffer."
  (interactive)
  (let ((filename (buffer-file-name))
        (buffer (current-buffer))
        (name (buffer-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (when (yes-or-no-p "Are you sure you want to remove this file? ")
        (delete-file filename)
        (kill-buffer buffer)
        (message "File '%s' successfully removed" filename)))))
#+end_src
**** Yanking Current File Information
:PROPERTIES:
:ID:       0C6F73B1-74F4-465E-95D7-1370CEF32443
:END:
#+begin_src emacs-lisp
(defun *-copy-buffer-file-name-as-kill (choice)
  "Copy the buffer-file-name to the kill-ring"
  (interactive "cCopy Buffer Name (f)ull, (d)irectory, (b)asename:")
  (let ((new-kill-string)
        (name (if (eq major-mode 'dired-mode)
                  (dired-get-filename)
                (or (buffer-file-name) ""))))
    (setq new-kill-string
          (cond ((eq choice ?f) name)
                ((eq choice ?d) (file-name-directory name))
                ((eq choice ?b) (file-name-nondirectory name))
                (t (message "Quit") nil)))
    (when new-kill-string
      (message "%s copied" new-kill-string)
      (kill-new new-kill-string))))
#+end_src
**** Aligning at Multiple Regexps
:PROPERTIES:
:tangle: no
:END:
#+begin_src elisp
(defun *-align-regexp-multiple (s)
  "align at each character in S in succession"
  (if (< (length s) 1)
      (align-regexp (point) (mark) s)
    (align-regexp (point) (mark) (substring s 0 1))
    (align-regexp-multiple (substring s 1))))
#+end_src
**** Deleting Trailing Whitespace
:PROPERTIES:
:ID:       BB298C84-1FFF-4DCD-8202-216D2E2ADBD2
:END:
#+begin_src emacs-lisp
(defcustom *-delete-trailing-whitespace-on-save
  nil
  "If `t', files will be stripped of trailing whitespace before saving."
  :group '*-files)

(defun *-maybe-delete-trailing-whitespace ()
  (when *-delete-trailing-whitespace-on-save
    (delete-trailing-whitespace)))
#+end_src
The function is added to ~before-save-hook~ via =customize=.
** COMMENT File IO
:PROPERTIES:
:tangle: no
:END:
#+begin_src elisp
(defun file-string (file)
  "Read the contents of a file and return as a string,
   closing the file if it was not already open"
  ; (if (buffer-is-visiting file) don't close
  (with-temp-buffer (find-file-noselect file)
    (buffer-string)))

(defun file-lines (file)
  (split-string (file-string file) "\n"))

(defun load-safe (f)
  (if (not (ignore-errors (load f)))
      (not (message " |- LOAD-SAFE: '%s' failed to load." f)) t))

(defun load-files-from-file (file &optional home-directory)
  (if (not home-directory)
      (setq home-directory "~/Dropbox/.emacs.d/"))
  (message
	(if (not (and
		  (mapcar 'load-safe
			  (mapcar (lambda (f) (concat home-directory f))
				  (file-lines (concat home-directory file))))))
	    "All subordinate files loaded successfully."
	  "At least one subordinate file failed to load.  Check the log for more information.")))


(require 'recentf)
(recentf-mode t)
(setq recentf-max-menu-items 25)
(global-set-key (kbd "C-x M-f") 'recentf-open-files)

(eval-after-load "dired"
  '(progn
     (define-key dired-mode-map "F" 'my-dired-find-file)
     (defun my-dired-find-file (&optional arg)
       "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
       (interactive "P")
       (let* ((fn-list (dired-get-marked-files nil arg)))
         (mapc 'find-file fn-list)))))

(defun unfill-region (beg end)
 (interactive "*r")
 (let ((fill-column (point-max)))
 (fill-region beg end)))
(global-set-key (kbd "C-M-q") 'unfill-region)
#+end_src

** COMMENT [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Incremental-Search.html][Incremental Search]] (=isearch=)
:PROPERTIES:
:ID:       AA7E9EC1-99EF-42DD-A35A-82E0A10C16EF
:END:
#+begin_src elisp
(defun *-isearch-yank-thing-at-point ()
  (interactive)
  (isearch-yank-string (thing-at-point 'symbol)))
#+end_src

** COMMENT [[http://www.gnu.org/s/m4][M4]]
:PROPERTIES:
:ID:       C211A63E-90F8-4952-A049-ECA6614DBA6D
:END:
#+begin_src elisp
(defvar m4-mode-syntax-table)
(eval-after-load 'm4-mode
 '(modify-syntax-entry ?# "@" m4-mode-syntax-table))
#+end_src

*** TODO Fix defvar

** COMMENT [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html][Customize]]
*** Setting a Custom Custom File
:PROPERTIES:
:ID:       B1E68499-15D1-43B0-9A41-97E224C3C511
:END:
Emacs is famous for its customizability.  There are many, many
variables that directly support being customized with =custom.el=.
All of these variables can visually clog up the initialization file if
they are included there.

Fortunately, Emacs supports the customization of where all of these
customizations are stored.  (A little nuts, right?)
#+begin_src elisp
(load
 (setq custom-file
       (concat user-emacs-directory
               ".custom.el")))
#+end_src
Remember: the ~set~ family of functions returns the value that the
variable was set to.

*** Variable Customizations
Since it would be unreasonable to set up a system by which =custom.el=
would edit the Org source file for its customizations, I've decided to
track these customizations in its own file.  Sorry to disappoint!

If anything interesting comes up, explanations will be placed here.

**** Fonts
:PROPERTIES:
:ID:       B2310DEE-3854-455E-BE58-380E23E9CFF4
:END:
These are default fonts.  The fonts I /use/ are properly customized.
#+BEGIN_SRC elisp
(defcustom *-text-sans-type
  "Arial"
  "The type to use for sans-serif body text."
  :group '*-fonts)

(defcustom *-text-serif-type
  "Georgia"
  "The type to use for sans-serif body text."
  :group '*-fonts)

(defcustom *-text-mono-type
  "Courier"
  "The type to use for sans-serif body text."
  :group '*-fonts)

(set-frame-font *-text-mono-type)
#+END_SRC

***** TODO add download instructions
***** TODO Use faces instead of strings
- then I'll be able to use different faces for text and ~code~.

* COMMENT Other Files
Some other files that I found in my =.emacs.d= that I don't really use
anymore, but could be useful...
- mwe-color-box.el
- unbound.el
- mc-auto-encrypt.el

* COMMENT File Local Variables
:PROPERTIES:
:tangle: no
:END:
# Local Variables:
# org-edit-src-content-indentation: 0
# eval: (add-hook 'org-babel-post-tangle-hook (lambda () (load-file user-init-file)))
# End:
